<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="Z_MM_PEDIDO" VERSION="1" LANGU="P" DESCRIPT="Pedido de compra" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
 <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="DATA_VENCIMENTO" VERSION="1" LANGU="P" DESCRIPT="Data de vencimento do adiantamento" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ME_DPDDAT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="EMPRESA" VERSION="1" LANGU="P" DESCRIPT="Empresa" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BUKRS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="ENTREGUE" VERSION="1" LANGU="P" DESCRIPT="X = Entregue" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BOOLEAN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="MOEDA" VERSION="1" LANGU="P" DESCRIPT="Código da moeda" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="WAERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="PEDIDO" VERSION="1" LANGU="P" DESCRIPT="Nº do documento de compras" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="EBELN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="PERCENTAGEM_ADIANTAMENTO" VERSION="1" LANGU="P" DESCRIPT="Porcentagem de adiantamento" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ME_DPPCNT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="TIPO_ADIANTAMENTO" VERSION="1" LANGU="P" DESCRIPT="Código de adiantamento" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ME_DPTYP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="Z_MM_PEDIDO" CMPNAME="VALOR_ADIANTAMENTO" VERSION="1" LANGU="P" DESCRIPT="Montante de adiantamento em moeda do documento" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ME_DPAMNT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="P" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="CONSTRUCTOR" SCONAME="I_PEDIDO" VERSION="1" LANGU="P" DESCRIPT="Nº do documento de compras" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="EBELN"/>
  <source>method constructor.
    data: lw_ekko type ekko.

    me-&gt;pedido = i_pedido.
    select single *
            from ekko into lw_ekko where ebeln = i_pedido.
    me-&gt;tipo_adiantamento = lw_ekko-dptyp.
    me-&gt;valor_adiantamento = lw_ekko-dpamt.
    me-&gt;percentagem_adiantamento = lw_ekko-dppct.
    me-&gt;data_vencimento = lw_ekko-dpdat.
    me-&gt;moeda = lw_ekko-waers.
    me-&gt;empresa = lw_ekko-bukrs.
    select single entregue from zcditab_docent into me-&gt;entregue where ebeln = me-&gt;pedido.

  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_ADIANTADO" VERSION="1" LANGU="P" DESCRIPT="Retorna valor adiantado e documento" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_ADIANTADO" SCONAME="E_BELNR" VERSION="1" LANGU="P" DESCRIPT="Nº documento de um documento contábil" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="BELNR_D"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_ADIANTADO" SCONAME="E_GJAHR" VERSION="1" LANGU="P" DESCRIPT="Exercício" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="GJAHR"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_ADIANTADO" SCONAME="E_DMBTR" VERSION="1" LANGU="P" DESCRIPT="Montante em moeda interna" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DMBTR"/>
  <source>method get_adiantado.
    data: lv_belnr type belnr_d,
          lv_gjahr type gjahr,
          lw_bkpf  type bkpf,
          lv_dmbtr type dmbtr.

    clear: e_dmbtr, e_gjahr, e_belnr.

    select distinct belnr gjahr from ekbe into (lv_belnr, lv_gjahr) where ebeln = me-&gt;pedido and bewtp = &apos;A&apos;.
      select single * from bkpf into lw_bkpf where bukrs = me-&gt;empresa and
                                                   belnr = lv_belnr and
                                                   gjahr = lv_gjahr.
      if sy-subrc = 0 and lw_bkpf-xreversal &lt;&gt; &apos;X&apos;.
        select wrbtr  from bseg into lv_dmbtr where bukrs = me-&gt;empresa and
                                                         belnr = lv_belnr and
                                                         gjahr = lv_gjahr and
                                                         koart = &apos;K&apos;.
          e_dmbtr = lv_dmbtr + e_dmbtr.
        endselect.
        e_belnr = lv_belnr.
        e_gjahr = lv_gjahr.
      endif.
    endselect.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_BL" VERSION="1" LANGU="P" DESCRIPT="Retorna B/L" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_BL" SCONAME="I_EBELP" VERSION="1" LANGU="P" DESCRIPT="Nº item do documento de compra" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="EBELP"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_BL" SCONAME="E_BL" VERSION="1" LANGU="P" DESCRIPT="B/L" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR40"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_BL" SCONAME="E_DATA" VERSION="1" LANGU="P" DESCRIPT="Data B/L" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="DATUM"/>
  <source>method GET_BL.
    data: lv_processo type ZSDELE_PROCESSO.

    select single processo from zmmtab_pofact as k inner join zsdtab_proform as p
                              on k~vbeln = p~facturafinal
                              into lv_processo
                            where k~ebeln = me-&gt;pedido and
                                  k~ebelp = i_ebelp.

    if sy-subrc = 0.
      select single bol statbl from zsdtab_processo into (e_bl, e_data) where processo = lv_processo.
    endif.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_FACTURA" VERSION="1" LANGU="P" DESCRIPT="Retorna factura" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_FACTURA" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Nº documento de vendas e distribuição" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="VBELN"/>
  <source>method GET_FACTURA.
    data: lv_awkey type awkey,
          lw_ekbe  type ekbe,
          lw_bkpf  type bkpf.

    select * from ekbe into lw_ekbe where ebeln = me-&gt;pedido and
                                          bewtp = &apos;Q&apos;.
      concatenate lw_ekbe-belnr lw_ekbe-gjahr into lv_awkey.
      select single * from bkpf into lw_bkpf where awkey = lv_awkey.
      if sy-subrc = 0 and lw_bkpf &lt;&gt; &apos;X&apos;.
        select single xblnr from RBKP into return where belnr = lw_ekbe-belnr and
                                                        gjahr = lw_ekbe-gjahr.
      endif.
    endselect.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDO" VERSION="1" LANGU="P" DESCRIPT="Retorna Pedido" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDO" SCONAME="I_EBELN" VERSION="1" LANGU="P" DESCRIPT="Nº do documento de compras" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="EBELN"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDO" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Pedido de compra" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="Z_MM_PEDIDO"/>
  <source>method GET_PEDIDO.
    data: lx_pedido type ref to z_mm_pedido.

    create object lx_pedido
      exporting
        i_pedido = i_ebeln.
    return = lx_pedido.

  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" VERSION="1" LANGU="P" DESCRIPT="Retorna pedidos de importação com adiantamento" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" SCONAME="IT_EBELN" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" SCONAME="IT_DTVENCI" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" SCONAME="IT_CODIGO" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" SCONAME="IT_BELNR" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" SCONAME="I_ENTREGUE" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PEDIDOS_COM_ADIANTAMENTO" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Pedidos" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZMM_PEDIDOS"/>
  <source>method get_pedidos_com_adiantamento.
    field-symbols: &lt;fs_ebeln&gt; type table,
                   &lt;fs_dtvenci&gt; type table,
                   &lt;fs_codigo&gt; type table,
                   &lt;fs_belnr&gt; type table,
                   &lt;fs_entregue&gt;  type boolean.

    assign it_ebeln-&gt;* to &lt;fs_ebeln&gt;.
    assign it_dtvenci-&gt;* to &lt;fs_dtvenci&gt;.
    assign it_codigo-&gt;* to &lt;fs_codigo&gt;.
    assign it_belnr-&gt;* to &lt;fs_belnr&gt;.
    assign i_entregue-&gt;* to &lt;fs_entregue&gt;.

    data: lv_ebeln type ebeln,
          lx_pedido type ref to z_mm_pedido,
          lx_cadcdi type ref to zimp_cadcdi_cl.

    if not &lt;fs_ebeln&gt; is initial or not &lt;fs_dtvenci&gt; is initial.
      select ebeln from ekko into lv_ebeln where ebeln in &lt;fs_ebeln&gt; and
                                                 dpdat in &lt;fs_dtvenci&gt; and
                                                 DPTYP &lt;&gt; &apos; &apos; and
                                                 bsart = &apos;Z0IP&apos;.
        if not &lt;fs_belnr&gt; is initial.
          select count(*) from ekbe where belnr in &lt;fs_belnr&gt; and
                                          bewtp = &apos;A&apos;.
          if sy-dbcnt = 0. &quot; Falhou o filtro
            continue.
          endif.
        endif.
        create object lx_pedido
          exporting
            i_pedido = lv_ebeln.
        append lx_pedido to return.
      endselect.
    elseif not &lt;fs_codigo&gt; is initial.
      data: lw_mestre type zcditab_mestre,
            lt_ebeln  type table of ebeln.

      select * from zcditab_mestre into lw_mestre where codigo in &lt;fs_codigo&gt;.
        create object lx_cadcdi
          exporting
            i_codigo = lw_mestre-codigo.
        call method lx_cadcdi-&gt;get_pedidos
          receiving
            return = lt_ebeln.
        loop at lt_ebeln into lv_ebeln.
          if not &lt;fs_belnr&gt; is initial.
            select count(*) from ekbe where belnr in &lt;fs_belnr&gt; and
                                            bewtp = &apos;A&apos;.
            if sy-dbcnt = 0. &quot; Falhou o filtro
              continue.
            endif.
          endif.
          create object lx_pedido
            exporting
              i_pedido = lv_ebeln.
          append lx_pedido to return.
        endloop.
      endselect.
    elseif not &lt;fs_belnr&gt; is initial.
      select distinct ebeln from ekbe into lv_ebeln where belnr in &lt;fs_belnr&gt; and
                                                          bewtp = &apos;A&apos;.
        create object lx_pedido
          exporting
            i_pedido = lv_ebeln.
        append lx_pedido to return.
      endselect.
    else.
      select ebeln from ekko into lv_ebeln where DPTYP &lt;&gt; &apos; &apos; and
                                                 bsart = &apos;Z0IP&apos;.
        create object lx_pedido
          exporting
            i_pedido = lv_ebeln.
        append lx_pedido to return.
      endselect.
    endif.

    if &lt;fs_entregue&gt; is ASSIGNED and &lt;fs_entregue&gt; = &apos;X&apos;.
      loop at return into lx_pedido.
        if lx_pedido-&gt;entregue &lt;&gt; &apos;X&apos;.
          delete return index sy-tabix.
        endif.
      endloop.
    else.
      loop at return into lx_pedido.
        if lx_pedido-&gt;entregue &lt;&gt; &apos; &apos;.
          delete return index sy-tabix.
        endif.
      endloop.
    endif.

  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PENDING_APPROVAL" VERSION="1" LANGU="P" DESCRIPT="Return POs requiring approval" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PENDING_APPROVAL" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Pedidos" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZMM_PEDIDOS"/>
  <source>method get_pending_approval.

    constants: lc_frggr type frggr value &apos;Z1&apos;. &quot;Release group from Purchase Orders in your system

    field-symbols: &lt;f1&gt; type any.
    data: hfdpos like sy-fdpos.
    data: p_frgrs type boolean,
          p_frgse type boolean,
          p_frgvo type boolean.

    data: lt_ekko type table of ekko,
          lw_ekko type ekko,
          lv_name type text60,
          lt_t16fc type table of t16fc,
          lw_t16fc type t16fc,
          lv_tabix type sytabix,
          lw_t16fs type t16fs,
          lx_po    type ref to z_mm_pedido.

    data: xfrg1 type frgzu,
          xfrg2 type frgzu.

    data: zus type table of t16fv,
          lw_zus type t16fv.

    data: begin of zuskey,
             mandt type mandt,
             frggr type frggr,
             frgsx type frgsx,
          end of zuskey.

    data:  s_frggr type range of t16fc-frggr.

    p_frgse = &apos;X&apos;.
    p_frgrs = &apos; &apos;.
    p_frgvo = &apos;X&apos;.

    select * from t16fc into table lt_t16fc.
    loop at lt_t16fc into lw_t16fc.
      lv_tabix = sy-tabix.
      authority-check object &apos;M_EINK_FRG&apos;
                                          id &apos;FRGCO&apos; field lw_t16fc-frgco
                                          id &apos;FRGGR&apos; field lw_t16fc-frggr.

      if sy-subrc &lt;&gt; 0.
        delete lt_t16fc index lv_tabix.
      endif.
    endloop.
    sort lt_t16fc by frggr.
    delete lt_t16fc where frggr &lt;&gt; lc_frggr.

    loop at lt_t16fc into lw_t16fc.
      refresh lt_ekko.
      check lw_t16fc-frgco &lt;&gt; &apos; &apos;.
      check lw_t16fc-frggr = lc_frggr.

* Check at least of the codes is relevant

      select single * from t16fs into lw_t16fs
                        where frggr eq lc_frggr
                          and ( frgc1 eq lw_t16fc-frgco or
                                frgc2 eq lw_t16fc-frgco or
                                frgc3 eq lw_t16fc-frgco or
                                frgc4 eq lw_t16fc-frgco or
                                frgc5 eq lw_t16fc-frgco or
                                frgc6 eq lw_t16fc-frgco or
                                frgc7 eq lw_t16fc-frgco or
                                frgc8 eq lw_t16fc-frgco ).
      check sy-subrc = 0.
      call function &apos;ME_REL_CHECK_MANY&apos;
        exporting
          i_frgot = &apos;2&apos;
          i_frgco = lw_t16fc-frgco
        tables
          t_frggr = s_frggr
          t_t16fv = zus.
      check not zus[] is initial.
      select * from ekko into table lt_ekko
          for all entries in zus
        where frgke &lt;&gt;  &apos;C&apos; and frgke &lt;&gt; &apos; &apos;
          and frgrl eq &apos;X&apos;
          and frggr eq lc_frggr
          and frgsx eq zus-frgsx
          and procstat &lt;&gt; &apos;08&apos;.

* Clean EKKO table
      loop at lt_ekko into lw_ekko.
        lv_tabix = sy-tabix.
        move-corresponding lw_ekko to zuskey.
        read table zus into lw_zus with key
                                 frggr = zuskey-frggr
                                 frgsx = zuskey-frgsx binary search.
        check sy-subrc eq 0.
        xfrg1 = lw_zus+9(8).
        xfrg2 = lw_ekko-frgzu.
        translate xfrg2 using &apos;X  +&apos;.
        overlay xfrg1 with xfrg2 only &apos;+&apos;.
        search xfrg1 for &apos;X&apos;.

        if sy-subrc ne 0.
          delete lt_ekko index lv_tabix.
          continue.
        else.
*---- Freigabestelle merken -------------------------------------------*
          hfdpos = sy-fdpos.
          assign xfrg2+sy-fdpos(1) to &lt;f1&gt;.
*---- Freigabe bereits erfolgt ----------------------------------------*
          if  p_frgrs eq space and
             &lt;f1&gt; eq space.
            delete lt_ekko index lv_tabix.
            continue.
          else.
*---- Freigabe noch nicht erfolgt -------------------------------------*
            if  p_frgse eq space and
              &lt;f1&gt; ne space.
              delete lt_ekko index lv_tabix.
              continue.
            else.
*---- Freigabevoraussetzung fehlt -------------------------------------*
              if xfrg1 ca &apos;+&apos; and
                 p_frgvo ne space.
                delete lt_ekko index lv_tabix.
                continue.
              endif.
            endif.
          endif.
        endif.
      endloop.
      if not lt_ekko[] is initial.
        loop at lt_ekko into lw_ekko.
          create object lx_po
            exporting
              i_pedido = lw_ekko-ebeln.
          append lx_po to return.
        endloop.
      endif.
    endloop.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PROCESSO_CADCDI" VERSION="1" LANGU="P" DESCRIPT="Retorna pedido CAD/CDI" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="GET_PROCESSO_CADCDI" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Processo CAD/CDI" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR20"/>
  <source>method GET_PROCESSO_CADCDI.
    call method zimp_cadcdi_cl=&gt;get_processo_para_pedido
      exporting
        i_ebeln = me-&gt;pedido
      receiving
        return  = return.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="IS_FACTURADO" VERSION="1" LANGU="P" DESCRIPT="Pedido completamente facturado?" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="IS_FACTURADO" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Completamente facturado?" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLEAN"/>
  <source>method IS_FACTURADO.
    data: lv_vbeln type vbeln.

    lv_vbeln = me-&gt;get_factura( ).
    if lv_vbeln is initial.
      return = &apos; &apos;.
    else.
      return = &apos;X&apos;.
    endif.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="SET_APPROVAL" VERSION="1" LANGU="P" DESCRIPT="Set approval of the purchase order" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="SET_APPROVAL" SCONAME="I_FRGCO" VERSION="1" LANGU="P" DESCRIPT="Código de liberação" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FRGCO"/>
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="SET_APPROVAL" SCONAME="RETURN" VERSION="1" LANGU="P" DESCRIPT="Parâmetro de retorno" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BAPIRET2"/>
  <source>method set_approval.
    data: lt_return type table of bapireturn,
          lw_return type bapireturn.

    call function &apos;BAPI_PO_RELEASE&apos;
      exporting
        purchaseorder          = pedido
        po_rel_code            = i_frgco
      tables
        return                 = lt_return
      exceptions
        authority_check_fail   = 1
        document_not_found     = 2
        enqueue_fail           = 3
        prerequisite_fail      = 4
        release_already_posted = 5
        responsibility_fail    = 6
        others                 = 7.
    loop at lt_return into lw_return where type = &apos;E&apos;.
      return = lw_return-message.
    endloop.
    commit work and wait.
  endmethod.</source>
 </method>
 <method CLSNAME="Z_MM_PEDIDO" CMPNAME="SET_ENTREGUE" VERSION="1" LANGU="P" DESCRIPT="Set estado da documentação" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="Z_MM_PEDIDO" CMPNAME="SET_ENTREGUE" SCONAME="I_ENTREGUE" VERSION="1" LANGU="P" DESCRIPT="X = Entregue" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN"/>
  <source>method SET_ENTREGUE.
    data: lw_ent type zcditab_docent.
    select single * from zcditab_docent into lw_ent
        where ebeln = me-&gt;pedido.
    if sy-subrc = 0.
      update zcditab_docent set entregue = I_ENTREGUE
                                where ebeln = me-&gt;pedido.
    else.
      lw_ent-ebeln = me-&gt;pedido.
      lw_ent-entregue = i_entregue.
      insert into zcditab_docent values lw_ent.
    endif.
    commit work.
  endmethod.</source>
 </method>
</CLAS>
